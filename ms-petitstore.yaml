openapi: 3.0.3
info:
  title: Swagger petsItStore - OpenAPI 3.0
  description: System of petsShops
  termsOfService: http://swagger.io/terms/
  contact:
    email: ncy.fers@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
servers:
  - url: https://petsitstore.swagger.io/api/v3
tags:
  - name: users
    description: Operations about users
  - name: brands
    description: Operations about brands
  - name: products
    description: Operations about products
  - name: tutors
    description: Operations about tutors
  - name: pets
    description: Everything about your petss
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: services
    description: Operations about services
  - name: store
    description: Access to petsstore orders
    externalDocs:
      description: Find out more about our store
      url: http://swagger.io
paths:
  /users:
    post:
      tags:
        - users
      summary: Create one user
      description: This can only be done by the logged in users.
      operationId: createusers
      requestBody:
        description: Created users object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/users'
          application/xml:
            schema:
              $ref: '#/components/schemas/users'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/users'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/users'
            application/xml:
              schema:
                $ref: '#/components/schemas/users'
  /users/createWithList:
    post:
      tags:
        - users
      summary: Creates list of userss with given input array
      description: Creates list of userss with given input array
      operationId: createuserssWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/users'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/users'
            application/xml:
              schema:
                $ref: '#/components/schemas/users'
        default:
          description: successful operation
  /users/login:
    get:
      tags:
        - users
      summary: Logs users into the system
      description: ''
      operationId: loginusers
      parameters:
        - name: usersname
          in: query
          description: The users name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the users
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid usersname/password supplied
  /users/logout:
    get:
      tags:
        - users
      summary: Logs out current logged in users session
      description: ''
      operationId: logoutusers
      parameters: []
      responses:
        default:
          description: successful operation
  /users/{usersname}:
    get:
      tags:
        - users
      summary: Get users by users name
      description: ''
      operationId: getusersByName
      parameters:
        - name: usersname
          in: path
          description: 'The name that needs to be fetched. Use users1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/users'
            application/xml:
              schema:
                $ref: '#/components/schemas/users'
        '400':
          description: Invalid usersname supplied
        '404':
          description: users not found
    put:
      tags:
        - users
      summary: Update users
      description: This can only be done by the logged in users.
      operationId: updateusers
      parameters:
        - name: usersname
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent users in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/users'
          application/xml:
            schema:
              $ref: '#/components/schemas/users'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/users'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - users
      summary: Delete users
      description: This can only be done by the logged in users.
      operationId: deleteusers
      parameters:
        - name: usersname
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid usersname supplied
        '404':
          description: users not found
  /brands:
    post:
      tags:
        - brands
      summary: Create Brand
      description: Create a new Brand
      operationId: createBrands
      requestBody:
        description: Create a new brand in the petstore
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Brands'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
        '400':
          description: Invalid ID supplied
        '404':
          description: pets not found
        '405':
          description: Validation exception
  /pets:
    put:
      tags:
        - pets
      summary: Update an existing pets
      description: Update an existing pets by Id
      operationId: updatepets
      requestBody:
        description: Update an existent pets in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/pets'
          application/xml:
            schema:
              $ref: '#/components/schemas/pets'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/pets'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pets'
            application/xml:
              schema:
                $ref: '#/components/schemas/pets'
        '400':
          description: Invalid ID supplied
        '404':
          description: pets not found
        '405':
          description: Validation exception
      security:
        - petsstore_auth:
            - write:petss
            - read:petss
    post:
      tags:
        - pets
      summary: Add a new pets to the store
      description: Add a new pets to the store
      operationId: addpets
      requestBody:
        description: Create a new pets in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/pets'
          application/xml:
            schema:
              $ref: '#/components/schemas/pets'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/pets'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pets'
            application/xml:
              schema:
                $ref: '#/components/schemas/pets'
        '405':
          description: Invalid input
      security:
        - petsstore_auth:
            - write:petss
            - read:petss
  /pets/findByStatus:
    get:
      tags:
        - pets
      summary: Finds petss by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findpetssByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            default: available
            enum:
              - available
              - pending
              - sold
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/pets'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/pets'
        '400':
          description: Invalid status value
      security:
        - petsstore_auth:
            - write:petss
            - read:petss
  /pets/findByTags:
    get:
      tags:
        - pets
      summary: Finds petss by tags
      description: >-
        Multiple tags can be provided with comma separated strings. Use tag1,
        tag2, tag3 for testing.
      operationId: findpetssByTags
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/pets'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/pets'
        '400':
          description: Invalid tag value
      security:
        - petsstore_auth:
            - write:petss
            - read:petss
  /pets/{petsId}:
    get:
      tags:
        - pets
      summary: Find pets by ID
      description: Returns a single pets
      operationId: getpetsById
      parameters:
        - name: petsId
          in: path
          description: ID of pets to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pets'
            application/xml:
              schema:
                $ref: '#/components/schemas/pets'
        '400':
          description: Invalid ID supplied
        '404':
          description: pets not found
      security:
        - api_key: []
        - petsstore_auth:
            - write:petss
            - read:petss
    post:
      tags:
        - pets
      summary: Updates a pets in the store with form data
      description: ''
      operationId: updatepetsWithForm
      parameters:
        - name: petsId
          in: path
          description: ID of pets that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Name of pets that needs to be updated
          schema:
            type: string
        - name: status
          in: query
          description: Status of pets that needs to be updated
          schema:
            type: string
      responses:
        '405':
          description: Invalid input
      security:
        - petsstore_auth:
            - write:petss
            - read:petss
    delete:
      tags:
        - pets
      summary: Deletes a pets
      description: delete a pets
      operationId: deletepets
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: petsId
          in: path
          description: pets id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid pets value
      security:
        - petsstore_auth:
            - write:petss
            - read:petss
  /pets/{petsId}/uploadImage:
    post:
      tags:
        - pets
      summary: uploads an image
      description: ''
      operationId: uploadFile
      parameters:
        - name: petsId
          in: path
          description: ID of pets to update
          required: true
          schema:
            type: integer
            format: int64
        - name: additionalMetadata
          in: query
          description: Additional Metadata
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - petsstore_auth:
            - write:petss
            - read:petss
  /store/inventory:
    get:
      tags:
        - store
      summary: Returns pets inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - api_key: []
  /store/order:
    post:
      tags:
        - store
      summary: Place an order for a pets
      description: Place a new order in the store
      operationId: placeOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/xml:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '405':
          description: Invalid input
  /store/order/{orderId}:
    get:
      tags:
        - store
      summary: Find purchase order by ID
      description: >-
        For valid response try integer IDs with value <= 5 or > 10. Other values
        will generate exceptions.
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of order that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
    delete:
      tags:
        - store
      summary: Delete purchase order by ID
      description: >-
        For valid response try integer IDs with value < 1000. Anything above
        1000 or nonintegers will generate API errors
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
components:
  schemas:
    Response:
      type: string
      example: 32be188e-c251-4cce-93d7-5df08d950141
    Brands:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 32be188e-c251-4cce-93d7-5df08d950141
        description:
          type: string
          format: string
          example: Nome da Marca
        active:
          type: boolean
          example: true
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        petsId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
      xml:
        name: order
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        usersname:
          type: string
          example: fehguy
        address:
          type: array
          xml:
            name: addresses
            wrapped: true
          items:
            $ref: '#/components/schemas/Address'
      xml:
        name: customer
    Address:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: '94301'
      xml:
        name: address
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
    users:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        usersname:
          type: string
          example: theusers
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        usersStatus:
          type: integer
          description: users Status
          format: int32
          example: 1
      xml:
        name: users
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    pets:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        category:
          $ref: '#/components/schemas/Category'
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pets status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: pets
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    brands:
      description: brands object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Brands'
        application/xml:
          schema:
            $ref: '#/components/schemas/Brands'
    pets:
      description: pets object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/pets'
        application/xml:
          schema:
            $ref: '#/components/schemas/pets'
    usersArray:
      description: List of users object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/users'
  securitySchemes:
    petsstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petsstore3.swagger.io/oauth/authorize
          scopes:
            write:petss: modify petss in your account
            read:petss: read your petss
    api_key:
      type: apiKey
      name: api_key
      in: header
